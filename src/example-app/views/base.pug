doctype html
html
  head
    meta(charset='utf-8')
    link(href='//fonts.googleapis.com/css?family=Roboto', rel='stylesheet')
    
    each val in paths.externals.css
      link(href=val, rel='stylesheet') 
    
    script(src=paths.client, type='text/javascript')
    script(src=paths.controllers, type='text/javascript')
    
    each val in paths.externals.js
      script(src=val, type='text/javascript')
    
    script(type='text/javascript').

      window.pie = window.pie || {};
      window.pie.env = {mode: 'gather'};
      window.pie.model = {
        weights: !{weights},
        scoringType: '!{scoringType || 'weighted'}',
        pies: !{pieModels},
        langs: !{langs}
      };
      
      window._customElements = {
        models: !{elementModels}
      };
      
      document.addEventListener('DOMContentLoaded', () => {
        let upgradePromises = _.map(_customElements.models, (m) => {
          return customElements.whenDefined(m.element);
        });

        Promise.all(upgradePromises).then(() => {
          console.log('all elements are upgraded, set the models...');
          console.log('elementModels: ', _customElements.models);
          _.forEach(_customElements.models, (m) => {
            let el = document.querySelector(`${m.element}[data-id="${m.id}"]`);
            if (el) {
              _.forEach(m, (value, key) => {
                if(key !== 'id' && key !== 'element'){
                  el[key] = value;
                }
              });
            } else {
              throw new Error(`can't find element for:  ${m.element}, ${m.id}`);
            }
          });
        });
      }); 

      window.pie.session = [];
      
      document.addEventListener('pie.player-ready', function(event){
        var player = event.target;
        var pieController = new pie.Controller(window.pie.model, window['#{ids.controllers}']);
        
        player.controller = pieController;
        player.env = window.pie.env;
        player.session = window.pie.session;
        
        var panel = document.querySelector('pie-control-panel');
        panel.env = window.pie.env;
        
        pieController.getLanguages().then(function(l) {
          panel.languages = l;
        })
        .catch(e => {
          console.error(e);
        });

        panel.addEventListener('envChanged', function(event){
          
          player.env = event.target.env;
          
          if (event.target.env.mode === 'evaluate') {
            player.getOutcome().then(function(outcome) {
              panel.score = ' Score: ' + outcome.summary.percentage + '% Points: ' + outcome.summary.points + '/' + outcome.summary.maxPoints;
            });
          } else {
            panel.score = '';
          }

        });
      });
    
    block head-extras

  body
    pie-control-panel
    pie-player
      | !{markup}
