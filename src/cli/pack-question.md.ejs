# pack-question 
---
Generate some javascript for use in rendering the question.

It generates 2 javascript files: 
 * `pie.js` - contains all the logic for rendering, includes the individual pies, a pie-player definition and ??
 * `controllers.js` - contains a map of pie names to their controllers, exports the map to either `window` or `exports`.

> Note: This doesn't generate the final question for you. To do that you'll need to create the final html page, include the 2 js files above, and use a controller that can interact with the controller-map.js file. See [pie-docs](http://pielabs.github.io/pie-docs) for more infomation.

### Options

 `--dir` - the relative path to a directory to use as the root. This should contain `config.json` and `index.html` (default: the current working directory)
  `--port` - the port to use - default `4000`
  `--clean` - clean build assets before serving. Do this if you've added a new component. default: `false`
  `--bundleName` - the name of the generated bundle - default `pie.js`
  `--controllersFilename` - the name of the generated controllers file - default `controllers.js`
  `--pieBranch` - what branch of the pie dependencies (pie-player, pie-control-panel, etc) to use: default: `develop`
  `--support` - a js file (or url) to load to add support for a build type. See below.
  `--questionConfigFile` - the name of the pie data file - default `config.json`
  `--questionDependenciesFile` - the name of the pie data file - default `dependencies.json`
  `--questionMarkupFile` - the name of layout file - default `index.html`
  ~~`--keepBuildAssets` - keep supporting build assets (like node_modules etc) after packing has completed - default:  `true`~~
  `--buildExample` - build an example? - default: `true`  
  `--exampleFile` - if building an example - the name of the generated example html file. default: `example.html`  
  
### Examples
```shell
pie-cli pack-question --dir ../path/to/dir
```

<%- loadFile('./support.md') %>
