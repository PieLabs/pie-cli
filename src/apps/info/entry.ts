import { controllerDependency, sockJs, targetsToElements, targetsToKeyMap } from '../src-snippets';

import { ElementDeclaration } from '../../code-gen';
import { PieTarget } from '../../install';

export default function js(
  declarations: ElementDeclaration[],
  mappings: {
    controllers: PieTarget[],
    configure: PieTarget[]
  },
  sockPath: string) {

  const configurationMap = mappings.configure.length === 0 ? undefined : targetsToKeyMap(mappings.configure)

  return `
/** Auto generated by ${__filename} */

//pie controllers 
let controllers = {};
${mappings.controllers.map(controllerDependency).join('\n')}


//config declarations
${targetsToElements(mappings.configure)}

//pie declarations
${declarations.map((e) => e.js).join('\n')}

// the catalog ui
import { elementsDefined } from 'pie-catalog-client/src/bootstrap/repo';

let initSock = ${sockJs()}

let init = () => {

  elementsDefined
    .then(() => {
      let entry = document.querySelector('catalog-entry');
      entry.element = window.element;

      entry.config = window.orgRepo;

      if (!window.demo.config) {
        throw new Error('config is missing');
      }
      let demo = document.querySelector('catalog-demo');
      demo.configureMap = ${configurationMap ? JSON.stringify(configurationMap) : 'undefined'};
      demo.config = window.demo.config;
      demo.controllers = controllers;
      demo.markup = window.demo.markup;

      setTimeout(() => {
        let c = document.querySelector('catalog-container');
        c.isLoading(false);
      }, 180);
    });

    initSock('${sockPath}');
}

document.addEventListener('DOMContentLoaded', () => {
  init();
}); `;
}
